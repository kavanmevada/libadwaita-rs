// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::AdaptiveCondition;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "AdwAdaptiveState")]
    pub struct AdaptiveState(Object<ffi::AdwAdaptiveState, ffi::AdwAdaptiveStateClass>) @implements gtk::Buildable;

    match fn {
        type_ => || ffi::adw_adaptive_state_get_type(),
    }
}

impl AdaptiveState {
    #[doc(alias = "adw_adaptive_state_new")]
    pub fn new() -> AdaptiveState {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::adw_adaptive_state_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`AdaptiveState`] objects.
    ///
    /// This method returns an instance of [`AdaptiveStateBuilder`](crate::builders::AdaptiveStateBuilder) which can be used to create [`AdaptiveState`] objects.
    pub fn builder() -> AdaptiveStateBuilder {
        AdaptiveStateBuilder::new()
    }

    #[doc(alias = "adw_adaptive_state_add_setter")]
    pub fn add_setter(&self, object: &impl IsA<glib::Object>, property: &str, value: &glib::Value) {
        unsafe {
            ffi::adw_adaptive_state_add_setter(
                self.to_glib_none().0,
                object.as_ref().to_glib_none().0,
                property.to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    //#[doc(alias = "adw_adaptive_state_add_setters")]
    //pub fn add_setters(&self, first_object: &impl IsA<glib::Object>, first_property: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:adw_adaptive_state_add_setters() }
    //}

    #[doc(alias = "adw_adaptive_state_get_condition")]
    #[doc(alias = "get_condition")]
    pub fn condition(&self) -> AdaptiveCondition {
        unsafe { from_glib_full(ffi::adw_adaptive_state_get_condition(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_adaptive_state_set_condition")]
    pub fn set_condition(&self, condition: &mut AdaptiveCondition) {
        unsafe {
            ffi::adw_adaptive_state_set_condition(
                self.to_glib_none().0,
                condition.to_glib_none_mut().0,
            );
        }
    }

    #[doc(alias = "enter")]
    pub fn connect_enter<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn enter_trampoline<F: Fn(&AdaptiveState) + 'static>(
            this: *mut ffi::AdwAdaptiveState,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"enter\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    enter_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "exit")]
    pub fn connect_exit<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn exit_trampoline<F: Fn(&AdaptiveState) + 'static>(
            this: *mut ffi::AdwAdaptiveState,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"exit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    exit_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "condition")]
    pub fn connect_condition_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_condition_trampoline<F: Fn(&AdaptiveState) + 'static>(
            this: *mut ffi::AdwAdaptiveState,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::condition\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_condition_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl Default for AdaptiveState {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`AdaptiveState`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct AdaptiveStateBuilder {
    builder: glib::object::ObjectBuilder<'static, AdaptiveState>,
}

impl AdaptiveStateBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn condition(self, condition: &AdaptiveCondition) -> Self {
        Self {
            builder: self.builder.property("condition", condition),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`AdaptiveState`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> AdaptiveState {
        self.builder.build()
    }
}

impl fmt::Display for AdaptiveState {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AdaptiveState")
    }
}
