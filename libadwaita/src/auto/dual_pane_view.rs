// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

#[cfg(any(feature = "v1_3", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
use crate::BrowsingViewChild;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "AdwDualPaneView")]
    pub struct DualPaneView(Object<ffi::AdwDualPaneView, ffi::AdwDualPaneViewClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::adw_dual_pane_view_get_type(),
    }
}

impl DualPaneView {
    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_new")]
    pub fn new() -> DualPaneView {
        assert_initialized_main_thread!();
        unsafe { gtk::Widget::from_glib_none(ffi::adw_dual_pane_view_new()).unsafe_cast() }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`DualPaneView`] objects.
    ///
    /// This method returns an instance of [`DualPaneViewBuilder`](crate::builders::DualPaneViewBuilder) which can be used to create [`DualPaneView`] objects.
    pub fn builder() -> DualPaneViewBuilder {
        DualPaneViewBuilder::new()
    }

    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_find_child")]
    pub fn find_child(&self, name: &str) -> Option<BrowsingViewChild> {
        unsafe {
            from_glib_none(ffi::adw_dual_pane_view_find_child(
                self.to_glib_none().0,
                name.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_get_content")]
    #[doc(alias = "get_content")]
    pub fn content(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::adw_dual_pane_view_get_content(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_dual_pane_view_get_content_visible")]
    #[doc(alias = "get_content_visible")]
    pub fn is_content_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::adw_dual_pane_view_get_content_visible(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "adw_dual_pane_view_get_folded")]
    #[doc(alias = "get_folded")]
    pub fn is_folded(&self) -> bool {
        unsafe { from_glib(ffi::adw_dual_pane_view_get_folded(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_dual_pane_view_get_pop_content_on_fold")]
    #[doc(alias = "get_pop_content_on_fold")]
    pub fn is_pop_content_on_fold(&self) -> bool {
        unsafe {
            from_glib(ffi::adw_dual_pane_view_get_pop_content_on_fold(
                self.to_glib_none().0,
            ))
        }
    }

    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_get_sidebar")]
    #[doc(alias = "get_sidebar")]
    pub fn sidebar(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::adw_dual_pane_view_get_sidebar(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_dual_pane_view_pop")]
    pub fn pop(&self, animate: bool) -> bool {
        unsafe {
            from_glib(ffi::adw_dual_pane_view_pop(
                self.to_glib_none().0,
                animate.into_glib(),
            ))
        }
    }

    #[doc(alias = "adw_dual_pane_view_push")]
    pub fn push(&self, child: &impl IsA<gtk::Widget>, animate: bool) {
        unsafe {
            ffi::adw_dual_pane_view_push(
                self.to_glib_none().0,
                child.as_ref().to_glib_none().0,
                animate.into_glib(),
            );
        }
    }

    #[doc(alias = "adw_dual_pane_view_push_by_name")]
    pub fn push_by_name(&self, name: &str, animate: bool) {
        unsafe {
            ffi::adw_dual_pane_view_push_by_name(
                self.to_glib_none().0,
                name.to_glib_none().0,
                animate.into_glib(),
            );
        }
    }

    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_set_content")]
    pub fn set_content(&self, content: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::adw_dual_pane_view_set_content(
                self.to_glib_none().0,
                content.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    #[doc(alias = "adw_dual_pane_view_set_folded")]
    pub fn set_folded(&self, folded: bool) {
        unsafe {
            ffi::adw_dual_pane_view_set_folded(self.to_glib_none().0, folded.into_glib());
        }
    }

    #[doc(alias = "adw_dual_pane_view_set_pop_content_on_fold")]
    pub fn set_pop_content_on_fold(&self, pop_content_on_fold: bool) {
        unsafe {
            ffi::adw_dual_pane_view_set_pop_content_on_fold(
                self.to_glib_none().0,
                pop_content_on_fold.into_glib(),
            );
        }
    }

    #[cfg(any(feature = "v1_3", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
    #[doc(alias = "adw_dual_pane_view_set_sidebar")]
    pub fn set_sidebar(&self, sidebar: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::adw_dual_pane_view_set_sidebar(
                self.to_glib_none().0,
                sidebar.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    pub fn get_property_content(&self) -> Option<gtk::Widget> {
        glib::ObjectExt::property(self, "content")
    }

    pub fn set_property_content<P: IsA<gtk::Widget>>(&self, content: Option<&P>) {
        glib::ObjectExt::set_property(self, "content", &content)
    }

    pub fn get_property_sidebar(&self) -> Option<gtk::Widget> {
        glib::ObjectExt::property(self, "sidebar")
    }

    pub fn set_property_sidebar<P: IsA<gtk::Widget>>(&self, sidebar: Option<&P>) {
        glib::ObjectExt::set_property(self, "sidebar", &sidebar)
    }

    #[doc(alias = "content")]
    pub fn connect_content_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_trampoline<F: Fn(&DualPaneView) + 'static>(
            this: *mut ffi::AdwDualPaneView,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::content\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_content_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "content-visible")]
    pub fn connect_content_visible_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_visible_trampoline<F: Fn(&DualPaneView) + 'static>(
            this: *mut ffi::AdwDualPaneView,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::content-visible\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_content_visible_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "folded")]
    pub fn connect_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_folded_trampoline<F: Fn(&DualPaneView) + 'static>(
            this: *mut ffi::AdwDualPaneView,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::folded\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_folded_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "pop-content-on-fold")]
    pub fn connect_pop_content_on_fold_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_pop_content_on_fold_trampoline<
            F: Fn(&DualPaneView) + 'static,
        >(
            this: *mut ffi::AdwDualPaneView,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::pop-content-on-fold\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_pop_content_on_fold_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "sidebar")]
    pub fn connect_sidebar_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sidebar_trampoline<F: Fn(&DualPaneView) + 'static>(
            this: *mut ffi::AdwDualPaneView,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::sidebar\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_sidebar_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

#[cfg(any(feature = "v1_3", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_3")))]
impl Default for DualPaneView {
    fn default() -> Self {
        Self::new()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`DualPaneView`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DualPaneViewBuilder {
    builder: glib::object::ObjectBuilder<'static, DualPaneView>,
}

impl DualPaneViewBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn content(self, content: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("content", content.clone().upcast()),
        }
    }

    pub fn folded(self, folded: bool) -> Self {
        Self {
            builder: self.builder.property("folded", folded),
        }
    }

    pub fn pop_content_on_fold(self, pop_content_on_fold: bool) -> Self {
        Self {
            builder: self
                .builder
                .property("pop-content-on-fold", pop_content_on_fold),
        }
    }

    pub fn sidebar(self, sidebar: &impl IsA<gtk::Widget>) -> Self {
        Self {
            builder: self.builder.property("sidebar", sidebar.clone().upcast()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    pub fn cursor(self, cursor: &gdk::Cursor) -> Self {
        Self {
            builder: self.builder.property("cursor", cursor.clone()),
        }
    }

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    pub fn layout_manager(self, layout_manager: &impl IsA<gtk::LayoutManager>) -> Self {
        Self {
            builder: self
                .builder
                .property("layout-manager", layout_manager.clone().upcast()),
        }
    }

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    pub fn overflow(self, overflow: gtk::Overflow) -> Self {
        Self {
            builder: self.builder.property("overflow", overflow),
        }
    }

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    pub fn accessible_role(self, accessible_role: gtk::AccessibleRole) -> Self {
        Self {
            builder: self.builder.property("accessible-role", accessible_role),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`DualPaneView`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> DualPaneView {
        self.builder.build()
    }
}

impl fmt::Display for DualPaneView {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DualPaneView")
    }
}
