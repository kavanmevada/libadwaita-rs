// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::AdaptiveConditionType;
use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct AdaptiveCondition(Boxed<ffi::AdwAdaptiveCondition>);

    match fn {
        copy => |ptr| ffi::adw_adaptive_condition_copy(mut_override(ptr)),
        free => |ptr| ffi::adw_adaptive_condition_free(ptr),
        type_ => || ffi::adw_adaptive_condition_get_type(),
    }
}

impl AdaptiveCondition {
    #[doc(alias = "adw_adaptive_condition_new")]
    pub fn new(type_: AdaptiveConditionType, value: f64) -> AdaptiveCondition {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::adw_adaptive_condition_new(type_.into_glib(), value)) }
    }
}
